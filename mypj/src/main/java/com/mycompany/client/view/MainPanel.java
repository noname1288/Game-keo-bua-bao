/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.client.view;

import com.mycompany.client.control.ClientSocket;
import com.mycompany.client.model.ClientState;
import com.mycompany.shared.Player;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import static java.awt.image.ImageObserver.HEIGHT;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 *
 * @author quang
 */
public class MainPanel extends javax.swing.JPanel {

    /**
     * Creates new form MainPanel
     *
     * @param client
     */
    public MainPanel(ClientSocket client) {
        initComponents();
        this.client = client;
        listPlayer = new ArrayList<>();
        TakeInfo();
        enterRoom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                jTextArea1ComponentHidden(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jScrollPane3.setViewportView(jList1);

        jScrollPane4.setViewportView(jList2);

        jButton1.setText("Tạo Phòng");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Bảng Xếp Hạng");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(28, 28, 28)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextArea1ComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTextArea1ComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextArea1ComponentHidden

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            client.newRoom();
        } catch (IOException ex) {
            Logger.getLogger(MainPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        client.getRankList();
        while (client.getState() != ClientState.RANK_LIST) {
            try {
                Thread.sleep(50); // Giảm thời gian chờ
            } catch (InterruptedException e) {
            }
        }
        showRankDialog((HashMap<String, HashMap<String, String>>) client.getData());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void TakeInfo() {
        // hiển thị 3 người chơi có điểm cao nhất
        //tạo và lấy data từ server về
        HashMap<String, HashMap<String, String>> data;
        client.getThreeHighest();
        while (client.getState() != ClientState.THREE_HIGHEST) {
            try {
                Thread.sleep(50); // Giảm thời gian chờ
            } catch (InterruptedException e) {
            }
        }
        data = (HashMap<String, HashMap<String, String>>) client.getData();
        // tạo format để hiển thị 
        String format = "Hạng %d: %-15s%s%s\n";
        int totalLength = 50; // Tổng chiều dài dải ký tự
        int pointLength = 10;  // Giữ một khoảng đủ cho điểm (10 ký tự)
        String player1 = data.get("1").get("playerName");
        String score1 = data.get("1").get("score");

        String player2 = data.get("2").get("playerName");
        String score2 = data.get("2").get("score");

        String player3 = data.get("3").get("playerName");
        String score3 = data.get("3").get("score");

        // loại bỏ ScrollPanel của phần hiển thị 3 người chơi cao điểm và thông tin các nhân
        jScrollPane1.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane2.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        //tạo kích thước của phần thông tin 3 người chơi cao điểm
        jTextArea1.setPreferredSize(new Dimension(280, 86));
        //hiển thị thông tin 3 người chơi
        jTextArea1.setText(
                String.format(
                        format,
                        1,
                        player1,
                        " ".repeat(totalLength - player1.length() - pointLength),
                        score1)
                + "\n"
                + String.format(
                        format,
                        2,
                        player2,
                        " ".repeat(totalLength - player2.length() - pointLength),
                        score2)
                + "\n"
                + String.format(
                        format,
                        3,
                        player3,
                        " ".repeat(totalLength - player3.length() - pointLength),
                        score3)
        );
        // hiển thị thông tin của người chơi
        setInfoPlayer();
        getListPlayer();
        getListRoom();
    }

    public void createRoom(int IDRoom) {
        String maPhong = String.valueOf(IDRoom);
        while (maPhong.length() < 3) {
            maPhong = "0" + maPhong;
        }
        playRoom = new PlayRoom(
                (JFrame) this.frame,
                listPlayer,
                client,
                this,
                maPhong
        );
        playRoom.setListPlayer(listPlayer);
        playRoom.setBounds(0, 0, 400, 300);
        playRoom.setVisible(true);
        this.frame.remove(this);
        this.frame.add(playRoom);
        this.frame.revalidate();
        this.frame.repaint();
    }

    public void showInviteDialog(String inviter, String maPhong) {
        // Tạo cửa sổ nhỏ (JDialog)
        JDialog inviteDialog = new JDialog(frame, "Mời chơi", true);
        inviteDialog.setSize(200, 100);
        inviteDialog.setLocationRelativeTo(this);

        JTextArea infoInviter = new JTextArea();
        infoInviter.setText("Người chơi " + inviter + " mời bạn chơi!");
        inviteDialog.add(infoInviter, BorderLayout.CENTER);
        // Thêm nút "Mời" vào dialog
        JButton acceptBt = new JButton("Chấp Nhận");
        acceptBt.addActionListener((ActionEvent e) -> {
            client.acceptInvite(inviter);
            inviteDialog.dispose();
        });

        inviteDialog.add(acceptBt, BorderLayout.SOUTH);

        inviteDialog.setVisible(true);
    }

    // hàm hiển thị thông tin cá nhân
    // viết riêng vì cập nhật lại môi khi điểm thay đổi
    public void setInfoPlayer() {
        String myName = client.getPlayer().getPlayerName();
        client.getRank(client.getPlayer().getID());
        HashMap<String, String> data;

        while (client.getState() != ClientState.GET_RANK) {
            try {
                Thread.sleep(50); // Giảm thời gian chờ
            } catch (InterruptedException e) {
            }
        }
        data = (HashMap<String, String>) client.getData();
        String score = data.get("score");
        String rank = data.get("rank");
        jTextArea2.setText(
                "Tên người chơi:\n" + myName
                + "\n" + "score: " + score
                + "\nRank: " + rank);
    }

    //lấy thông tin danh sách người chơi
    //hàm này để dùng khởi tạo gọi lấy dữ liệu lần đầu tiên
    //ý tưởng đơn giản là khi có người chơi mới đăng nhập và khởi tạo gửi thông 
    //điệp lên server và server gửi lại danh sách mới cho tất cả các người chơi
    private void getListPlayer() {
        client.getListPlayers();
        while (client.getState() != ClientState.LIST_PLAYER) {
            try {
                Thread.sleep(50); // Giảm thời gian chờ
            } catch (InterruptedException e) {
            }
        }
        setListPlayer((HashMap<String, HashMap<String, String>>) client.getData());
    }

    // Hiển thị danh sách người chơi
    // hàm này cũng là hàm cập nhật thụ động khi có các thông điệp yêu cầu cập nhật lại
    // thông tin danh sách người chơi từ server gửi tới
    public void setListPlayer(HashMap<String, HashMap<String, String>> data) {
        DefaultListModel<String> listModel = new DefaultListModel<>();
        HashMap<String, Boolean> playerStatusMap = new HashMap<>(); // Lưu tên người chơi và trạng thái

        // xóa bỏ danh sách cũ
        listPlayer.clear();

        if (data != null) {
            for (Map.Entry<String, HashMap<String, String>> entry : data.entrySet()) {
                HashMap<String, String> playerInfo = entry.getValue();

                String playerName = playerInfo.get("playerName");
                String statusStr = playerInfo.get("status");
                boolean status = Boolean.parseBoolean(statusStr);

                // Bỏ qua nếu là chính người chơi hiện tại
                if (playerName.equals(client.getPlayer().getPlayerName())) {
                    continue;
                }
                if (status) {
                    listPlayer.add(playerName);
                }
                listModel.addElement(playerName); // Thêm tên vào listModel
                playerStatusMap.put(playerName, status); // Thêm trạng thái vào map
            }
            if (playRoom != null) {
                playRoom.setListPlayer(listPlayer);
            }
        }

        // Cập nhật JList
        jList1.setModel(listModel);
        jList1.setCellRenderer(new CustomListPlayerRenderer(playerStatusMap)); // Truyền bản đồ trạng thái vào renderer
        jList1.revalidate();
        jList1.repaint();
        jScrollPane3.revalidate();
        jScrollPane3.repaint();
    }

    // hàm hiển thị màu trạng thái cảu người chơi
    public class CustomListPlayerRenderer extends DefaultListCellRenderer {

        private final Map<String, Boolean> playerStatusMap; // Bản đồ lưu tên và trạng thái

        public CustomListPlayerRenderer(Map<String, Boolean> playerStatusMap) {
            this.playerStatusMap = playerStatusMap;
        }

        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index,
                boolean isSelected, boolean cellHasFocus) {
            // Sử dụng mặc định để render phần tử
            JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

            // Kiểm tra nếu value là String
            if (value instanceof String playerName) {
                // Lấy trạng thái từ Map bằng playerName
                Boolean status = playerStatusMap.get(playerName);

                // Đặt tên người chơi cho label
//                label.setText(playerName);
                // Điều chỉnh màu nền dựa trên trạng thái
                if (!isSelected && status != null) {
                    if (status) {
                        label.setBackground(Color.GREEN);
                    } else {
                        label.setBackground(Color.RED);
                    }
                }
            }

            return label;
        }
    }

    public void setFrame(JFrame frame) {
        this.frame = frame;
    }

    public void setPlayRoomAnotherPlayer(Player anotherPlayer) {
        playRoom.setAnotherPlayer(anotherPlayer);
    }

    public void showPlayRoom() {
        playRoom.setBounds(0, 0, 400, 300);
        playRoom.setVisible(true);
        this.frame.remove(this);
        this.frame.add(playRoom);
        this.frame.revalidate();
        this.frame.repaint();
    }

    //trả về playRoom để xử lý bên client ngắn hơn
    public PlayRoom getPlayRoom() {
        return playRoom;
    }

    //chức năng hiển thị danh sách phòng chơi
    // ý tưởng tương tự với danh sách người chơi 
    // hơi khác một chút là không có mốc kích hoạt rõ ràng như vậy
    // hàm gọi tới server lấy danh sách phòng chơi
    private void getListRoom() {
        client.getListRoom();
        while (client.getState() != ClientState.LIST_ROOM) {
            try {
                Thread.sleep(50); // Giảm thời gian chờ
            } catch (InterruptedException e) {
            }
        }
        // data gửi về có maPhong cung là key và giá trị là số người trong phòng
        setListRoom((HashMap<String, String>) client.getData());
    }

    // hàm gọi hiển thị danh sách người chơi
    public void setListRoom(HashMap<String, String> data) {
        DefaultListModel<String> listModel = new DefaultListModel<>();
        if (data != null) {
            for (Map.Entry<String, String> entry : data.entrySet()) {
                String IDRoom = entry.getKey();
                while (IDRoom.length() < 3) {
                    IDRoom = "0" + IDRoom;
                }
                String numberOfPlayer = entry.getValue();
                if (numberOfPlayer != null) {
                    String formattedString = String.format(" Mã Phong: %s             Số người: %s/2", IDRoom, numberOfPlayer);
                    listModel.addElement(formattedString); // Thêm tên vào listModel
                }
            }
        }
        // Cập nhật JList
        jList2.setModel(listModel);
        jList2.revalidate();
        jList2.repaint();
        jScrollPane4.revalidate();
        jScrollPane4.repaint();
    }

    private void enterRoom() {
        jList2.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Kiểm tra xem có phải là double-click không
                if (e.getClickCount() == 2) {
                    // Lấy chỉ số phần tử được click
                    int index = jList2.locationToIndex(e.getPoint());

                    // Kiểm tra xem chỉ số có hợp lệ không
                    if (index != -1) {
                        // Lấy giá trị của phần tử được double-click
                        String selectedValue = jList2.getModel().getElementAt(index);
                        String numberOfPlayer = selectedValue.substring(37, 38);
                        int IDRoom = Integer.parseInt(selectedValue.substring(11, 14));
                        if (numberOfPlayer.equals("1")) {
                            client.enterRoom(IDRoom);
                        } else {
                            JOptionPane.showMessageDialog(frame,
                                    "Vui lòng chọn phòng khác!",
                                    "Phòng đầy mất rồi",
                                    HEIGHT);
                        }
                    }
                }
            }
        });
    }

    private void showRankDialog(HashMap<String, HashMap<String, String>> data) {
        JDialog rankDialog = new JDialog(frame, "Bảng Xếp Hạng", true);
        rankDialog.setSize(300, 300);
        rankDialog.setLocationRelativeTo(this);

        JList<String> rankList = new JList<>();
        DefaultListModel<String> listModel = new DefaultListModel<>();

        for (Map.Entry<String, HashMap<String, String>> entry : data.entrySet()) {
            String rank = entry.getKey();
            HashMap<String, String> playerInfo = entry.getValue();

            String playerName = playerInfo.get("playerName");
            String score = playerInfo.get("score");
            String formattedString = String.format(" Hạng: %s   %s  - Điểm: %s", rank, playerName, score);
            listModel.addElement(formattedString); // Thêm tên vào listModel
        }
        
        rankList.setModel(listModel);
        JScrollPane scrollPane = new JScrollPane(rankList);
        rankDialog.add(scrollPane, BorderLayout.CENTER);
        rankDialog.setVisible(true);
    }

    private String maPhong;
    private JFrame frame;
    private final ClientSocket client;
    private PlayRoom playRoom;
    private ArrayList<String> listPlayer;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
